const { io } = require('socket.io-client')

console.log('üß† Smart Bot Client - Advanced AI!')
console.log('===================================')

// K·∫øt n·ªëi v·ªõi server
const socket = io('http://localhost:8080')

// Bot state
let botPlayer = null
let gameMap = null
let allPlayers = []
let mapWidth = 0
let mapHeight = 0
let isGameStarted = false
let movementInterval = null
let exploredCells = new Set()
let currentTarget = null
let stuckCounter = 0
let lastPosition = null

// Direction constants
const DIRECTIONS = {
  UP: 0,
  RIGHT: 1,
  DOWN: 2,
  LEFT: 3
}

const DIRECTION_NAMES = ['UP', 'RIGHT', 'DOWN', 'LEFT']
const DIRECTION_SYMBOLS = ['‚Üë', '‚Üí', '‚Üì', '‚Üê']

socket.on('connect', () => {
  console.log('üß† Smart Bot connected! Socket ID:', socket.id)
  console.log('üéÆ Sending join request...')
  
  const botName = `SmartBot_${socket.id.substring(0, 4)}`
  socket.emit('join_game', { playerName: botName })
})

socket.on('joined_game', (data) => {
  console.log('üéÆ Smart Bot joined game successfully!')
  console.log('üè† Room:', data.roomId)
  console.log('üë§ Player Name:', data.playerData.name)
  console.log('üé® Color:', data.playerData.color)
  console.log('üìç Starting Position:', `(${data.playerData.x}, ${data.playerData.y})`)
  console.log('üó∫Ô∏è  Map Size:', `${data.gameState.map[0].length}x${data.gameState.map.length}`)
  console.log('')
  
  botPlayer = data.playerData
  gameMap = data.gameState.map
  mapWidth = data.gameState.map[0].length
  mapHeight = data.gameState.map.length
  lastPosition = { x: botPlayer.x, y: botPlayer.y }
  
  console.log('üß† Smart Bot initialized with advanced pathfinding!')
  console.log('‚è≥ Waiting for game to start...')
})

socket.on('join_error', (data) => {
  console.error('‚ùå Smart Bot failed to join:', data.message)
})

socket.on('game_started', (data) => {
  console.log('üöÄ GAME STARTED! Smart Bot activating AI systems...')
  isGameStarted = true
  
  startSmartMovement()
})

socket.on('game_state', (gameState) => {
  // C·∫≠p nh·∫≠t state t·ª´ server
  if (gameState.players && botPlayer) {
    const serverPlayer = gameState.players.find(p => p.id === socket.id)
    if (serverPlayer) {
      // Ki·ªÉm tra xem bot c√≥ b·ªã stuck kh√¥ng
      if (lastPosition && lastPosition.x === serverPlayer.x && lastPosition.y === serverPlayer.y) {
        stuckCounter++
      } else {
        stuckCounter = 0
        lastPosition = { x: serverPlayer.x, y: serverPlayer.y }
      }
      
      botPlayer = serverPlayer
      
      // ƒê√°nh d·∫•u √¥ ƒë√£ explore
      const cellKey = `${botPlayer.x},${botPlayer.y}`
      if (!exploredCells.has(cellKey)) {
        exploredCells.add(cellKey)
        console.log(`üó∫Ô∏è  Explored: (${botPlayer.x}, ${botPlayer.y}) - Total: ${exploredCells.size} cells`)
      }
    }
    
    allPlayers = gameState.players
  }
})

socket.on('player_joined', (data) => {
  console.log(`üëã New player joined: ${data.player.name}`)
})

socket.on('connection_error', (error) => {
  console.log('‚ùå Connection failed:', error.message)
  process.exit(1)
})

socket.on('disconnect', () => {
  console.log('‚ùå Smart Bot disconnected')
  process.exit(0)
})

// ============================================
// SMART MOVEMENT LOGIC
// ============================================

function startSmartMovement() {
  console.log('üß† Starting advanced AI movement system...')
  console.log('üìä Features: Pathfinding, Exploration, Obstacle Avoidance')
  console.log('')
  
  // Di chuy·ªÉn m·ªói 400ms (faster than simple bot)
  movementInterval = setInterval(() => {
    if (botPlayer && gameMap && isGameStarted && botPlayer.isAlive) {
      makeSmartMove()
    }
  }, 400)
}

function makeSmartMove() {
  const currentX = botPlayer.x
  const currentY = botPlayer.y
  const currentDirection = botPlayer.direction
  
  // N·∫øu b·ªã stuck qu√° l√¢u, random direction m·ªõi
  if (stuckCounter > 5) {
    console.log('üîÑ Bot seems stuck, trying random direction...')
    currentTarget = null
    stuckCounter = 0
  }
  
  // N·∫øu kh√¥ng c√≥ target ho·∫∑c ƒë√£ ƒë·∫øn target, t√¨m target m·ªõi
  if (!currentTarget || (currentX === currentTarget.x && currentY === currentTarget.y)) {
    currentTarget = findNextExplorationTarget(currentX, currentY)
    if (currentTarget) {
      console.log(`üéØ New target: (${currentTarget.x}, ${currentTarget.y})`)
    }
  }
  
  // T√¨m h∆∞·ªõng di chuy·ªÉn t·ªët nh·∫•t
  let bestDirection
  
  if (currentTarget) {
    // S·ª≠ d·ª•ng pathfinding ƒë·ªÉ ƒëi ƒë·∫øn target
    bestDirection = findDirectionToTarget(currentX, currentY, currentTarget, currentDirection)
  } else {
    // Kh√¥ng c√≥ target, explore ng·∫´u nhi√™n
    bestDirection = findBestExplorationDirection(currentX, currentY, currentDirection)
  }
  
  if (bestDirection !== null) {
    // Xoay n·∫øu c·∫ßn
    if (bestDirection !== currentDirection) {
      botPlayer.direction = bestDirection
      const symbol = DIRECTION_SYMBOLS[bestDirection]
      console.log(`${symbol} Rotating to ${DIRECTION_NAMES[bestDirection]}`)
      
      socket.emit('player_action', {
        type: 'rotate',
        direction: bestDirection
      })
      return
    }
    
    // Di chuy·ªÉn
    const nextPos = getNextPosition(currentX, currentY, currentDirection)
    
    if (canMoveTo(nextPos.x, nextPos.y)) {
      const symbol = DIRECTION_SYMBOLS[currentDirection]
      console.log(`${symbol} Moving to (${nextPos.x}, ${nextPos.y})`)
      
      botPlayer.x = nextPos.x
      botPlayer.y = nextPos.y
      
      socket.emit('player_action', {
        type: 'move',
        direction: currentDirection
      })
    } else {
      console.log(`üö´ Path blocked, recalculating...`)
      currentTarget = null
    }
  } else {
    console.log('ü§î No valid direction found, staying put...')
  }
}

function findNextExplorationTarget(x, y) {
  // T√¨m √¥ ch∆∞a explore g·∫ßn nh·∫•t
  let minDistance = Infinity
  let bestTarget = null
  
  // Scan v√πng l√¢n c·∫≠n (radius 5)
  const radius = 5
  
  for (let dy = -radius; dy <= radius; dy++) {
    for (let dx = -radius; dx <= radius; dx++) {
      const targetX = x + dx
      const targetY = y + dy
      
      if (canMoveTo(targetX, targetY)) {
        const cellKey = `${targetX},${targetY}`
        
        if (!exploredCells.has(cellKey)) {
          const distance = Math.abs(dx) + Math.abs(dy)
          if (distance < minDistance) {
            minDistance = distance
            bestTarget = { x: targetX, y: targetY }
          }
        }
      }
    }
  }
  
  // N·∫øu kh√¥ng t√¨m th·∫•y √¥ ch∆∞a explore g·∫ßn, ch·ªçn random
  if (!bestTarget) {
    bestTarget = findRandomValidCell()
  }
  
  return bestTarget
}

function findRandomValidCell() {
  for (let i = 0; i < 20; i++) {
    const x = Math.floor(Math.random() * mapWidth)
    const y = Math.floor(Math.random() * mapHeight)
    
    if (canMoveTo(x, y)) {
      return { x, y }
    }
  }
  return null
}

function findDirectionToTarget(x, y, target, currentDirection) {
  // Simple greedy approach - di chuy·ªÉn v·ªÅ ph√≠a target
  const dx = target.x - x
  const dy = target.y - y
  
  // ∆Øu ti√™n axis c√≥ kho·∫£ng c√°ch l·ªõn h∆°n
  const priorities = []
  
  if (Math.abs(dy) >= Math.abs(dx)) {
    if (dy < 0) priorities.push(DIRECTIONS.UP)
    if (dy > 0) priorities.push(DIRECTIONS.DOWN)
    if (dx > 0) priorities.push(DIRECTIONS.RIGHT)
    if (dx < 0) priorities.push(DIRECTIONS.LEFT)
  } else {
    if (dx > 0) priorities.push(DIRECTIONS.RIGHT)
    if (dx < 0) priorities.push(DIRECTIONS.LEFT)
    if (dy < 0) priorities.push(DIRECTIONS.UP)
    if (dy > 0) priorities.push(DIRECTIONS.DOWN)
  }
  
  // Th·ª≠ c√°c direction theo th·ª© t·ª± ∆∞u ti√™n
  for (const dir of priorities) {
    const nextPos = getNextPosition(x, y, dir)
    if (canMoveTo(nextPos.x, nextPos.y)) {
      return dir
    }
  }
  
  // Kh√¥ng c√≥ direction n√†o ƒëi ƒë∆∞·ª£c v·ªÅ ph√≠a target, t√¨m b·∫•t k·ª≥ direction n√†o
  return findBestExplorationDirection(x, y, currentDirection)
}

function findBestExplorationDirection(x, y, currentDirection) {
  // ∆Øu ti√™n: ti·∫øp t·ª•c ƒëi th·∫≥ng
  const straight = getNextPosition(x, y, currentDirection)
  if (canMoveTo(straight.x, straight.y)) {
    return currentDirection
  }
  
  // Th·ª≠ c√°c h∆∞·ªõng kh√°c
  const directions = [
    (currentDirection + 3) % 4, // Tr√°i
    (currentDirection + 1) % 4, // Ph·∫£i
    (currentDirection + 2) % 4  // Quay l·∫°i
  ]
  
  for (const dir of directions) {
    const nextPos = getNextPosition(x, y, dir)
    if (canMoveTo(nextPos.x, nextPos.y)) {
      return dir
    }
  }
  
  return null
}

function getNextPosition(x, y, direction) {
  switch (direction) {
    case DIRECTIONS.UP:
      return { x, y: y - 1 }
    case DIRECTIONS.RIGHT:
      return { x: x + 1, y }
    case DIRECTIONS.DOWN:
      return { x, y: y + 1 }
    case DIRECTIONS.LEFT:
      return { x: x - 1, y }
    default:
      return { x, y }
  }
}

function canMoveTo(x, y) {
  // Ki·ªÉm tra bounds
  if (x < 0 || x >= mapWidth || y < 0 || y >= mapHeight) {
    return false
  }
  
  // Ki·ªÉm tra t∆∞·ªùng
  if (gameMap[y][x] === 1) {
    return false
  }
  
  // Ki·ªÉm tra collision v·ªõi player kh√°c (optional)
  // TODO: implement later if needed
  
  return true
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüëã Smart Bot shutting down...')
  console.log(`üìä Explored ${exploredCells.size} cells before shutdown`)
  
  if (movementInterval) {
    clearInterval(movementInterval)
  }
  socket.disconnect()
  process.exit(0)
})

console.log('üîå Connecting to http://localhost:8080...')
console.log('üí° Press Ctrl+C to exit')
